{%- import "util.include.jinja" as util -%}
# pylint: disable=missing-function-docstring, wrong-import-position, import-error, no-name-in-module, import-outside-toplevel, no-member, redefined-outer-name, unused-argument, unused-variable, invalid-name, redefined-outer-name, missing-class-docstring

import asyncio
import logging
import os
import sys
import datetime

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../{{data_project_name}}/src')))
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../{{data_project_name}}/tests')))
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../{{main_project_name}}/src')))

import tempfile
import pytest
from azure.eventhub import EventData
from azure.eventhub.aio import EventHubConsumerClient, EventHubProducerClient
from testcontainers.core.container import DockerContainer
from testcontainers.core.network import Network
from testcontainers.azurite import AzuriteContainer
from testcontainers.core.waiting_utils import wait_for_logs

{%- set imports = [] %}
{%- for messagegroupid, messagegroup in root.messagegroups.items() %}
{%- set groupname = messagegroupid | pascal %}
{%- set class_name = ( groupname | strip_dots ) + "EventProducer" %}
from {{main_project_name}}.producer import {{class_name}}
{%- for messageid, message in messagegroup.messages.items() %}
{%- set type_name = util.DeclareDataType( data_project_name, root, message ) %}
{%- if type_name != "object" %}
{%- set import_statement = "from " + (data_project_name | dotunderscore | lower) + " import " + (type_name | pascal | strip_namespace) %}
{%- if import_statement not in imports %}
{%- set _ = imports.append(import_statement) %}
{{ import_statement }}
{%- endif %}
{%- endif %}
{%- endfor %}
{%- endfor %}

@pytest.fixture(scope="module")
async def event_hub_emulator():
    with Network() as network:
        with AzuriteContainer("mcr.microsoft.com/azure-storage/azurite:3.31.0") \
                .with_command('azurite -l /data --blobHost 0.0.0.0 --queueHost 0.0.0.0 --tableHost 0.0.0.0 --skipApiVersionCheck --loose') \
                .with_bind_ports(10000, 10000) \
                .with_bind_ports(10001, 10001) \
                .with_bind_ports(10002, 10002) \
                .with_network(network) \
                .with_network_aliases("azurite") as azurite_container:
            try:
                wait_for_logs(azurite_container, ".*Azurite Blob service is successfully", timeout=10)
            except TimeoutError as e:
                stdoutlog,stderrlog = azurite_container.get_logs()
                print(stdoutlog)
                print(stderrlog)
                raise e
            config_file = tempfile.NamedTemporaryFile(delete=False, mode='w')
            config_content = '''
            {
            "UserConfig": {
                "NamespaceConfig": [
                {
                    "Type": "EventHub",
                    "Name": "emulatorNs1",
                    "Entities": [
                    {
                        "Name": "eh1",
                        "PartitionCount": "2",
                        "ConsumerGroups": [
                        {
                            "Name": "cg1"
                        }
                        ]
                    }
                    ]
                }
                ], 
                "LoggingConfig": {
                "Type": "File"
                }
            }
            }
            '''
            config_file.write(config_content)
            config_file.flush()
            config_file.close()
            config_file_path = config_file.name
            os.chmod(config_file_path, 0o666)

            try:
                with DockerContainer("mcr.microsoft.com/azure-messaging/eventhubs-emulator:latest") \
                        .with_volume_mapping(config_file_path, "/Eventhubs_Emulator/ConfigFiles/Config.json") \
                        .with_bind_ports(5672, 5672) \
                        .with_network(network) \
                        .with_network_aliases("eventhubs-emulator") \
                        .with_env("BLOB_SERVER", "azurite") \
                        .with_env("METADATA_SERVER", "azurite") \
                        .with_env("ACCEPT_EULA", "Y") as event_hubs_emulator_container:
                    try:
                        wait_for_logs(event_hubs_emulator_container, ".*Emulator is launching with config", timeout=10)
                    except TimeoutError as e:
                        stdoutlog,stderrlog = event_hubs_emulator_container.get_logs()
                        print(stdoutlog)
                        print(stderrlog)
                        raise e

                    event_hub_connection_str = "Endpoint=sb://localhost;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=SAS_KEY_VALUE;UseDevelopmentEmulator=true;EntityPath=eh1;"
                    blob_storage_connection_str = azurite_container.get_connection_string()

                    yield {
                        "event_hub_connection_str": event_hub_connection_str,
                        "blob_storage_connection_str": blob_storage_connection_str,
                        "network": network,
                        "azurite_container": azurite_container,
                        "event_hubs_emulator_container": event_hubs_emulator_container
                    }
            finally:
                os.unlink(config_file_path)

{%- for messagegroupid, messagegroup in root.messagegroups.items() %}
{%- set groupname = messagegroupid | pascal %}
{%- set class_name = ( groupname | strip_dots ) + "EventProducer" %}
{%- for messageid, message in messagegroup.messages.items() if (message | exists("envelope","CloudEvents/1.0")) %}
{%- set messagename = messageid | pascal | strip_dots | strip_namespace %}
{%- set test_function_name = "test_" + groupname | lower | replace(" ", "_") + "_" + messagename | lower | replace(" ", "_") %}

@pytest.mark.asyncio
async def {{ test_function_name | dotunderscore }}(event_hub_emulator):
    """Test the {{ messagename }} event from the {{ groupname }} message group"""

    async for emulator in event_hub_emulator:
        event_hub_conn_str = emulator["event_hub_connection_str"]

        producer = EventHubProducerClient.from_connection_string(event_hub_conn_str, eventhub_name="eh1")
        consumer = EventHubConsumerClient.from_connection_string(event_hub_conn_str, consumer_group="cg1", eventhub_name="eh1")

        on_event_future = asyncio.Future()
        async def on_event(partition_context, event):
            try:
                assert event.properties["cloudEvents_type".encode('utf-8')] == "{{ messageid }}".encode('utf-8')
                await partition_context.update_checkpoint(event)
                on_event_future.set_result(True)
            except Exception as e:
                on_event_future.set_exception(e)

        receive_task = asyncio.create_task(consumer.receive(on_event, starting_position="-1"))
        producer_instance = {{ class_name }}(producer, 'binary')
        {%- set type_name = util.DeclareDataType( data_project_name, root, message ) %}
        {%- if type_name != "object" %}
        # Create minimal test data instance to satisfy schema requirements
        try:
            import inspect
            import typing
            import enum
            data_class = {{ type_name | pascal | strip_namespace }}
            sig = inspect.signature(data_class.__init__)
            kwargs = {}
            for param_name, param in sig.parameters.items():
                if param_name == 'self':
                    continue
                if param.default == inspect.Parameter.empty or param.kind == inspect.Parameter.KEYWORD_ONLY:
                    # Get the actual type, unwrapping Optional/Union if needed
                    ann = param.annotation
                    origin = typing.get_origin(ann)
                    
                    # Handle Optional[X] which is Union[X, None]
                    if origin is typing.Union:
                        args = typing.get_args(ann)
                        # Use the first non-None type
                        ann = next((a for a in args if a is not type(None)), args[0])
                        origin = typing.get_origin(ann)
                    
                    # Now match based on the actual type
                    ann_str = str(ann).lower()
                    if ann is str or ann == 'str' or 'str' in ann_str:
                        kwargs[param_name] = ""
                    elif ann is int or ann == 'int' or 'int' in ann_str:
                        kwargs[param_name] = 0
                    elif ann is float or ann == 'float' or 'float' in ann_str:
                        kwargs[param_name] = 0.0
                    elif ann is bool or ann == 'bool' or 'bool' in ann_str:
                        kwargs[param_name] = False
                    elif origin is list or ann is list or 'list' in ann_str:
                        kwargs[param_name] = []
                    elif origin is dict or ann is dict or 'dict' in ann_str:
                        kwargs[param_name] = {}
                    elif isinstance(ann, type) and issubclass(ann, enum.Enum):
                        # For enums, use the first value
                        kwargs[param_name] = list(ann)[0] if list(ann) else None
                    elif 'enum' in ann_str:
                        # Fallback for enum detection via string
                        try:
                            kwargs[param_name] = list(ann)[0] if hasattr(ann, '__iter__') else None
                        except:
                            kwargs[param_name] = None
                    else:
                        kwargs[param_name] = None
            event_data = data_class(**kwargs)
        except Exception:
            event_data = {}
        {%- else %}
        event_data = {}
        {%- endif %}
        await producer_instance.send_{{ messageid | dotunderscore | snake }}(
            {%- for attrname, attribute in message.envelopemetadata.items() if attribute.required and attribute.value is not defined -%}
                _{{ attrname }} = {{ "'test'" if not attrname == 'time' else 'datetime.datetime.now().isoformat()' }},
            {%- endfor -%}
            {%- for attrname, attribute in message.envelopemetadata.items() if attribute.type == "uritemplate" -%}
                {%- for placeholder in attribute.value | regex_search('\\{([A-Za-z0-9_]+)\\}') %}_{{ placeholder | snake }} = 'test', {% endfor -%}
            {%- endfor -%}
            data = event_data
            {%- for attrname, attribute in message.envelopemetadata.items() if not attribute.required and attribute.value is not defined -%}
                , _{{ attrname }} = ''
            {%- endfor -%}
        )

        await asyncio.wait_for(on_event_future, timeout=10)
        if receive_task:
            receive_task.cancel()
            try:
                await receive_task
            except asyncio.CancelledError:
                pass
        await producer.close()

{%- endfor %}
{%- endfor %}
